//
// @fileOverview
//
// Everything in this is always available in the global scope (using
// `sass-resource-loader` in webpack). Note that here the order matters.
//
// @see https://www.sitepoint.com/extra-map-functions-sass/
// @see https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
//

// Retrieve color Sass maps
@function Color($key: "grey") {
  @return map-get($Colors, $key);
}

// get first item in a list
@function first($list) {
  @return nth($list, 1);
}

// get last item in a list
@function last($list) {
  @return nth($list, length($list));
}

// get first key in a map
@function getFirstKey($map) {
  $keys: map-keys($map);
  @return first($keys);
}

// get last key in a map
@function getLastKey($map) {
  $keys: map-keys($map);
  @return last($keys);
}

// get first value in a map
@function getFirstValue($map) {
  $values: map-values($map);
  @return first($values);
}

// get last value in a map
@function getLastValue($map) {
  $values: map-values($map);
  @return last($values);
}

// @see https://css-tricks.com/snippets/sass/deep-getset-maps/
@function map-find($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// @see https://stackoverflow.com/a/19125911/1938970
@function strip-unit($num) {
  @return math.div($num, $num * 0 + 1);
}

// @see https://stackoverflow.com/a/25478589/1938970
@function url-friendly-colour($colour) {
  @return "%23" + str-slice("#{$colour}", 2, -1);
}

// @see https://medium.com/@pentzzsolt/a-non-destructive-map-merge-function-for-sass-f91637f87b2e
@function map-deep-merge($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (not map-has-key($result, $key)) or
      (type-of(map-get($result, $key)) != type-of($value)) or
      (not (type-of(map-get($result, $key)) == map and type-of($value) == map))
    {
      $result: map-merge(
        $result,
        (
          $key: $value,
        )
      );
    } @else {
      $result: map-merge(
        $result,
        (
          $key: map-merge-deep(map-get($result, $key), $value),
        )
      );
    }
  }
  @return $result;
}

// @see https://stackoverflow.com/a/33536471/1938970
@function withDefaults($mapVariable: (), $defaultMap: ()) {
  @if (type-of($defaultMap) == "map") {
    $finalParams: $mapVariable;

    @each $key, $value in $defaultMap {
      @if (not map-has-key($mapVariable, $key)) {
        $finalParams: map-merge(
          $finalParams,
          (
            $key: $value,
          )
        );
      }
    }

    @return $finalParams;
  } @else {
    @error 'The withDefaults function only works for Sass maps';
  }
}

@function breakpoint-prev($name, $breakpoints) {
  $breakpoint-names: map-keys($breakpoints);
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n > 0, nth($breakpoint-names, $n - 1), null);
}

@function breakpoint-next($name, $breakpoints) {
  $breakpoint-names: map-keys($breakpoints);
  $n: index($breakpoint-names, $name);
  @return if(
    $n != null and $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}

@function breakpoint-max($name, $breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}

@function cast($unit, $value) {
  @if not unitless($value) {
    @error "'unit' should be called with a unitless value, given '#{$value}'";
  }

  @if $unit == "%" {
    @return $value + 0%;
  }
  @if $unit == "px" {
    @return $value + 0px;
  }
}

// Bootstrap functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
  }
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
@function escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      $string: str-replace($string, $char, $encoded);
    }
  }

  @return $string;
}
