.formToggle {
  position: relative;
  display: inline-block;

  @if $Forms-validation {
    @at-root .invalid & .dfn {
      @if $FormToggle-use-shadow-for-border {
        box-shadow: 0
          0
          0
          $FormToggle-border-thickness
          $Forms-invalid-color-border;
      } @else {
        border-color: $Forms-invalid-color-border;
      }
    }
    @at-root .invalid & input:focus ~ .label .dfn {
      box-shadow: 0 0 0 $FormToggle-border-thickness-focus
        $Forms-invalid-color-border;
    }
  }

  > input {
    @extend %Invisible;
    // position: absolute;
    // left: 0;
    // top: 0;
    // min-width: 1em;
    // width: 100%;
    // height: 100%;
    // z-index: 2;
    // opacity: 0;
    // margin: 0;
    // padding: 0;
    // cursor: pointer;
  }

  .dfn {
    position: relative;
    display: block;
    min-width: $FormToggle-size;
    min-height: $FormToggle-size;
    border-radius: $FormToggle-border-radius;
    @if $FormToggle-use-shadow-for-border {
      box-shadow: 0 0 0 $FormToggle-border-thickness $FormToggle-border-color;
      border: 0;
    } @else {
      border: $FormToggle-border-thickness solid $FormToggle-border-color;
    }
    background-color: $FormToggle-bg;
    transition: box-shadow $Transition;

    &:after {
      content: "";
      display: block;
      z-index: 0;
      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;
    }
  }

  > input:focus ~ .label .dfn {
    box-shadow: 0 0 0
      max($FormToggle-border-thickness, $FormToggle-border-thickness-focus)
      $FormToggle-border-color-focus;
  }

  > .label {
    // using flex guarantees that a single line checkbox is always vertically
    // centered despite the size of the toggle in relation to the font size of
    // the label
    display: flex;
    align-items: center;
    min-height: $FormToggle-size;
    min-width: $FormToggle-size;
    margin: 0;

    // position the label on top so that it can have clickable elements,
    // its label click behaviour must be ensured by having the input `id` as
    // the `for` attribute of the label (standard HTML)
    position: relative;
    z-index: 3;
    cursor: pointer;
  }

  // the actual label is a <span> but we call it label...
  &Label {
    padding-left: $FormToggle-label-gutter-x;
    line-height: $FormToggle-line-height;
    color: $FormToggle-color;
    font-weight: normal;

    a {
      color: $FormToggle-color;
      // we need to force the margin as we use `display: flex` on the parent
      // container which undoes the space before and after inner links
      // margin: 0 5px;
    }
  }
}
