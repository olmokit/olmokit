// @import "variables";

//
// Hamburger
//
// Animation techniques adapted from @delicious-hamburgers, usage is through
// mixin to allow flexibility in scoping and minimal output.
// Available animations are: basic, stack, collapse, converge, twist, spin
//
// Usage in project:
// ```
// $Hamburger__bar-width: 16px;
// $Hamburger__bar-bg: green;
// $Hamburger__bar-bg--hover: blue;
// $Hamburger__bar-margin: 5px;
//
// .MyOtherBurger\:,
// .Hamburger\: {
//   @include Hamburger();
//   @include Hamburger-stagger();
// }
// ```
//
// -----------------------------------------------------------------------------
@mixin Hamburger($opts: ()) {
  $opts: withDefaults(
    $opts,
    (
      position: absolute,
      width: $Hamburger-width,
      height: $Hamburger-height,
      bar-height: $Hamburger__bar-height,
      bar-width: $Hamburger__bar-width,
      bar-margin: $Hamburger__bar-margin,
      bar-bg: $Hamburger__bar-bg,
      bar-bg--hover: $Hamburger__bar-bg--hover,
      easing: $Hamburger-easing,
      time: $Transition-duration,
    )
  );

  position: map-get($opts, position);
  top: 0;
  right: 0;
  bottom: 0;
  padding: 0 $Grid-gutter-half;
  display: flex;
  align-items: center;
  min-width: map-get($opts, width);
  box-sizing: content-box;
  cursor: pointer;

  @if map-get($opts, bar-bg--hover) != inherit {
    &:hover {
      .bar {
        background: map-get($opts, bar-bg--hover);
      }
    }
  }

  &inner {
    position: absolute;
    width: map-get($opts, width);
    margin-top: -(math.div(map-get($opts, bar-height), 2));
    // height: map-get($opts, height);
    pointer-events: none;
  }

  .bar {
    position: absolute;
    left: 0;
    height: map-get($opts, bar-height);
    width: map-get($opts, bar-width);
    background: map-get($opts, bar-bg);
  }

  .bar1 {
    top: -((map-get($opts, bar-height)) + map-get($opts, bar-margin));
  }

  .bar2 {
    top: 0;
  }

  .bar3 {
    top: (map-get($opts, bar-height) + map-get($opts, bar-margin));
  }

  @content;
}

//
// Hamburger animation: stagger
//
// -----------------------------------------------------------------------------
@mixin Hamburger-stagger($opts: ()) {
  $opts: withDefaults(
    $opts,
    (
      active: $Hamburger-selector-active,
      bar-width: $Hamburger__bar-width,
      bar-bg--active: $Hamburger__bar-bg--active,
      easing: $Hamburger-easing,
      speed: $Hamburger-speed,
    )
  );

  .bar1,
  .bar3 {
    width: math.div(map-get($opts, bar-width), 2);
  }

  .bar3 {
    left: 50%;
  }

  .bar {
    transition: all math.div(0.3s, map-get($opts, speed)) map-get($opts, easing);
  }

  &#{map-get($opts, active)} {
    @if map-get($opts, bar-bg--active) != inherit {
      .bar {
        background: map-get($opts, bar-bg--active);
      }
    }

    .bar1,
    .bar3 {
      width: map-get($opts, bar-width);
    }

    .bar1 {
      transform: rotate(45deg);
      transform-origin: left;
      left: 4px;
    }

    .bar2 {
      transform: scaleX(0);
    }

    .bar3 {
      transform: rotate(-45deg);
      left: 0;
    }

    @content;
  }
}

//
// Hamburger animation: stack
//
// -----------------------------------------------------------------------------
@mixin Hamburger-stack($opts: ()) {
  $opts: withDefaults(
    $opts,
    (
      active: $Hamburger-selector-active,
      easing: $Hamburger-easing,
      speed: $Hamburger-speed,
    )
  );
  $speed: map-get($opts, speed);
  $easing: map-get($opts, easing);

  .bar {
    transition:
      transform math.div(0.3s, $speed) $easing,
      top math.div(0.4s, $speed) $easing math.div(0.3s, $speed);
  }

  &#{map-get($opts, active)} {
    .bar {
      transition:
        transform math.div(0.3s, $speed) $easing math.div(0.4s, $speed),
        top math.div(0.4s, $speed) $easing;
    }

    .bar1 {
      transform: rotate(45deg);
      top: 0;
    }

    .bar2 {
      transform: rotate(45deg);
    }

    .bar3 {
      transform: rotate(-45deg);
      top: 0;
    }

    @content;
  }
}

//
// Hamburger animation: collapse
//
// -----------------------------------------------------------------------------
@mixin Hamburger-collapse($opts: ()) {
  $opts: withDefaults(
    $opts,
    (
      active: $Hamburger-selector-active,
      easing: $Hamburger-easing,
      speed: $Hamburger-speed,
    )
  );
  $speed: map-get($opts, speed);
  $easing: map-get($opts, easing);

  .bar {
    transition:
      transform math.div(0.4s, $speed) $easing,
      top math.div(0.25s, $speed) $easing math.div(0.25s, $speed),
      opacity math.div(0.25s, $speed) $easing math.div(0.25s, $speed);
  }

  &#{map-get($opts, active)} {
    .bar {
      top: 0;
      transition:
        transform math.div(0.4s, $speed) $easing math.div(0.1s, $speed),
        top math.div(0.25s, $speed) $easing,
        opacity math.div(0.25s, $speed) $easing;
    }

    .bar1 {
      transform: rotate(135deg);
    }

    .bar2 {
      opacity: 0;
    }

    .bar3 {
      transform: rotate(45deg);
    }

    @content;
  }
}

//
// Hamburger animation: converge
//
// -----------------------------------------------------------------------------
@mixin Hamburger-converge($opts: ()) {
  $opts: withDefaults(
    $opts,
    (
      active: $Hamburger-selector-active,
      easing: $Hamburger-easing,
      speed: $Hamburger-speed,
    )
  );
  $speed: map-get($opts, speed);
  $easing: map-get($opts, easing);

  .bar {
    transition:
      transform math.div(0.4s, $speed) $easing,
      top math.div(0.4s, $speed) $easing;
  }

  &#{map-get($opts, active)} {
    .bar {
      top: 0;
    }

    .bar1 {
      transform: rotate(135deg);
    }

    .bar2 {
      transform: scale(0);
    }

    .bar3 {
      transform: rotate(-135deg);
    }

    @content;
  }
}

//
// Hamburger animation: twist
//
// -----------------------------------------------------------------------------
@mixin Hamburger-twist($opts: ()) {
  $opts: withDefaults(
    $opts,
    (
      active: $Hamburger-selector-active,
      bar-width: $Hamburger__bar-width,
      easing: $Hamburger-easing,
      speed: $Hamburger-speed,
    )
  );
  $bar-width: map-get($opts, bar-width);
  $speed: map-get($opts, speed);
  $easing: map-get($opts, easing);
  $ROOT-TWO: 1.4142135623730950488;

  .bar {
    transition:
      transform math.div(0.6s, $speed) $easing,
      top math.div(0.6s, $speed) $easing,
      left math.div(0.6s, $speed) $easing;
  }
  .bar1 {
    transform-origin: 0 50%;
    left: 0;
  }

  .bar2 {
    opacity: 1;
    transition: opacity math.div(0.2s, $speed) $easing math.div(0.4s, $speed);
  }

  &#{map-get($opts, active)} {
    .bar1 {
      transform: rotate(45deg);
      left: math.div($bar-width - (math.div($bar-width, $ROOT-TWO)), 2);
      top: -(math.div(math.div($bar-width, $ROOT-TWO), 2));
    }

    .bar2 {
      transition: opacity 0.2s $easing;
      opacity: 0;
    }

    .bar3 {
      transform: rotate(-225deg);
      top: 0;
    }

    @content;
  }
}

//
// Hamburger animation: spin
//
// -----------------------------------------------------------------------------
@mixin Hamburger-spin($opts: ()) {
  $opts: withDefaults(
    $opts,
    (
      active: $Hamburger-selector-active,
      bar-height: $Hamburger__bar-height,
      easing: $Hamburger-easing,
      speed: $Hamburger-speed,
    )
  );
  $bar-height: map-get($opts, bar-height);
  $speed: map-get($opts, speed);
  $easing: map-get($opts, easing);

  .Hamburger\:inner {
    transition: transform math.div(0.5sm $speed) $easing;
  }

  .bar {
    transition:
      transform math.div(0.5sm $speed) $easing,
      top math.div(0.25s, $speed) $easing math.div(0.25s, $speed),
      opacity math.div(0.25s, $speed) $easing math.div(0.25s, $speed);
  }

  &#{map-get($opts, active)} {
    .bar {
      top: 0;
      transition:
        transform math.div(0.5sm $speed) $easing,
        top math.div(0.25s, $speed) $easing,
        opacity math.div(0.25s, $speed) $easing;
    }

    .bar1 {
      transform: rotate(135deg);
    }

    .bar2 {
      opacity: 0;
    }

    .bar3 {
      transform: rotate(45deg);
    }

    .Hamburger\:inner {
      transform: rotate(180deg) translate3d(0, -$bar-height, 0);
    }

    @content;
  }
}
