import path from "node:path";
import ci from "ci-info";
import type { Configuration } from "webpack";
import { getPublicUrls } from "../helpers/index.js";
import { paths } from "../paths/index.js";
import type { CliLaravel } from "../pm.js";
import webpackEntry from "./entry.js";
import { getOutputName } from "./helpers.js";
import webpackOptimization from "./optimization.js";
import webpackPlugins from "./plugins.js";
import webpackResolve from "./resolve.js";
import webpackRulesAssets from "./rules-assets.js";
import webpackRulesScripts from "./rules-scripts.js";
import webpackRulesStyles from "./rules-styles.js";

export function webpackConfig(config: CliLaravel.Config) {
  let configuration: Configuration = {
    mode: process.env["NODE_ENV"],
    bail: process.env["NODE_ENV"] === "production",
    // @see https://webpack.js.org/configuration/devtool/
    watchOptions: {
      followSymlinks: true,
    },
    devtool: process.env.DEV_SOURCEMAPS
      ? process.env["NODE_ENV"] === "production"
        ? "source-map"
        : "eval"
      : false,
    output: {
      path: path.resolve(paths.frontend.dest.assets),
      // it must ends with a trailing slash, NOTE: that when we use a CDN we
      // probably need to set some CORS rules to allow the load of async chunks
      // To overcome CORS issues we could try to use `publicPath: "auto"`, see
      // https://webpack.js.org/guides/public-path/#automatic-publicpath
      publicPath: getPublicUrls().assets,
      // @see https://webpack.js.org/guides/build-performance/#output-without-path-info
      pathinfo: process.env["NODE_ENV"] === "production" ? false : true,
      filename: getOutputName("entry", "js"),
      chunkFilename: getOutputName("chunk", "js"),
    },
    entry: webpackEntry(),
    optimization: webpackOptimization(config),
    resolve: webpackResolve(config),
    // persistent cache during CI builds on filesystem
    cache: ci.isCI
      ? {
          // FIXME: check this how it would work with pnpm
          type: "filesystem",
          cacheDirectory: path.join(config.project.nodeModules, "/.cache"),
          // cacheDirectory: path.join(config.project.root, "/.npm/.cache-webpack"),
        }
      : // during dev webpack cache is opt-in, one must explictly set the
      // appropriate env variable to false, otherwise we set here `true` which
      // is webpack default value for this option (equal to `memory` cache)
      process.env.DEV_WEBPACK_CACHE
      ? {
          type: "filesystem",
          name: `${config.project.packageJson.name}-${process.env.APP_ENV}`,
          version: config.project.packageJson.version,
        }
      : {
          type: "memory",
        },
    snapshot: {
      // add path for caching on CI
      managedPaths: [
        config.project.nodeModules,
        path.join(config.project.root, "/.npm"),
      ],
    },
    // for webpack-dev-server
    infrastructureLogging: {
      // @see presets here https://github.com/webpack/webpack/blob/main/lib/stats/DefaultStatsPresetPlugin.js#L23
      level: "warn",
      debug: process.env.DEV_WEBPACK_DEBUG ? /webpack\.cache/ : undefined,
      appendOnly: true,
    },
    // @see https://github.com/webpack/webpack/blob/main/declarations/WebpackOptions.d.ts#L2383
    stats: {
      assets: false,
      hash: false,
      timings: false,
      cached: false,
      cachedAssets: false,
      version: false,
      builtAt: false,
      entrypoints: false,
      modules: false,
      chunkModules: false,
      cachedModules: false,
      runtimeModules: false,
      orphanModules: false,
      excludeAssets: /.*LICENSE\.txt$/, // Exclude license files
    },
    performance: {
      // do not show warnings for too big favicons, they are autogenerated...
      // only show performance report for css/js files
      assetFilter: (assetFilename: string) => /\.js$|css$/.test(assetFilename),
    },
    module: {
      rules: [
        ...webpackRulesAssets(config),
        ...webpackRulesScripts(),
        ...webpackRulesStyles(config),
      ],
    },
    plugins: webpackPlugins(config),
  };

  if (process.env.DEV_ANALYZE) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const SpeedMeasurePlugin = require("speed-measure-webpack-plugin");
    const smp = new SpeedMeasurePlugin();
    configuration = smp.wrap(configuration);
  }

  return configuration;
}

export default webpackConfig;
