<?php

namespace LaravelFrontend\Forms;

use Illuminate\Http\Request;
use LaravelFrontend\Forms\Olmoforms\Olmoforms;
use LaravelFrontend\Forms\Form;

class FormsController
{
    /**
     * Debug form by id
     *
     * We could skip using the Olmoforms class here, we do it just because it
     * allows to debug a form without the need of having visited the page
     * containing it upfront. That is instead the case for the other forms
     * since we do not have a database we rely on caching in order to inspect
     * and debug those kind of forms.
     *
     * @param Illuminate\Http\Request
     * @param string $id
     * @return \Illuminate\View\View
     */
    public function debug(Request $request, string $id)
    {
        $isFromOlmoforms = Olmoforms::isFromOlmoforms($id);

        if ($isFromOlmoforms) {
            $data = Olmoforms::get($id);
        } else {
            $data = Form::getCachedData($id);
        }
        if (!$data) {
            return 'Cannot debug this form! The ID is wrong? If it is 
            a form not generated by olmoforms before being able to see this page
            you need to visit a page where the form with this ID is used (cache
            needs to be generated).';
        }

        $form = new Form($id, $data);

        return view('components.debug-forms', [
            'form' => $form->json(),
            'origin' => $form->origin,
            'isForwardedFromOlmoforms' => $form->isForwardedFromOlmoforms,
            'stringsTable' => $this->getStringsTable($form),
        ]);
    }

    /**
     * Get csv candidate strings as a table
     *
     * @param LaravelFrontend\Forms\Form $form
     * @return string
     */
    private function getStringsTable($form)
    {
        $fieldStrings = $form->getStringsCandidates();

        // $html = '<table>';
        $columns = [];
        $rows = [];

        // derive columns and rows
        foreach ($fieldStrings as $name => $properties) {
            $columns['name'] = [
                'label' => 'Field name',
            ];
            $row = [];
            $cell = ['value' => $name];
            $row[] = $cell;

            foreach ($properties as $key => $value) {
                $columns[$key] = [
                    'value' => $key,
                    'label' => "Field property: $key",
                ];
                if ($key === 'option') {
                    $cell = ['option' => []];
                    foreach ($value as $optKey => $optValue) {
                        $cell['option'][$optKey] = $optValue;
                    }
                } else {
                    $cell = ['values' => $value];
                }
                $row[] = $cell;
            }
            $rows[] = $row;
        }

        return [
            'columns' => $columns,
            'rows' => $rows,
        ];
    }
}
