"use strict";(self.webpackChunk_olmokit_docs=self.webpackChunk_olmokit_docs||[]).push([[7681],{1357:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(4863);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3784:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(3027),o=(n(4863),n(1357));const s={id:"folder-structure",title:"Folder structure"},r=void 0,i={unversionedId:"folder-structure",id:"folder-structure",title:"Folder structure",description:"Frontend code resides by default in the src folder placed in the root of the project. Everything gets compiled and assembled in the standard Laravel folders /resources and /public, whose content is gitignored.",source:"@site/docs/folder-structure.md",sourceDirName:".",slug:"/folder-structure",permalink:"/olmokit/folder-structure",draft:!1,editUrl:"https://github.com/olmokit/olmokit/tree/main/apps/docs/docs/docs/folder-structure.md",tags:[],version:"current",frontMatter:{id:"folder-structure",title:"Folder structure"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/olmokit/getting-started"},next:{title:"Configuration",permalink:"/olmokit/configuration"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"bootstrap",id:"bootstrap",level:2},{value:"config",id:"config",level:2},{value:"public",id:"public",level:2},{value:"resources",id:"resources",level:2},{value:"src",id:"src",level:2},{value:"src/assets",id:"srcassets",level:3},{value:"src/assets/fonts",id:"srcassetsfonts",level:4},{value:"src/assets/images",id:"srcassetsimages",level:4},{value:"src/assets/images/placeholder.png",id:"srcassetsimagesplaceholderpng",level:4},{value:"src/assets/media",id:"srcassetsmedia",level:4},{value:"src/assets/svgicons",id:"srcassetssvgicons",level:4},{value:"src/assets/favicon.png",id:"srcassetsfaviconpng",level:4},{value:"src/components",id:"srccomponents",level:3},{value:"src/config",id:"srcconfig",level:3},{value:"src/fragments",id:"srcfragments",level:3},{value:"src/middlwares",id:"srcmiddlwares",level:3},{value:"src/routes",id:"srcroutes",level:3},{value:"src/services",id:"srcservices",level:3},{value:"src/utils",id:"srcutils",level:3},{value:"src/vendor",id:"srcvendor",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Frontend code resides by default in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder placed in the root of the project. Everything gets compiled and assembled in the standard Laravel folders ",(0,o.kt)("inlineCode",{parentName:"p"},"/resources")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/public"),", whose content is gitignored.\nEach path used in the build scripts can be overridden in the specific project ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file, but the ideal and default folder configuration assumed is the following:"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All files marked with ",(0,o.kt)("inlineCode",{parentName:"li"},"**")," are autogenerated by ",(0,o.kt)("inlineCode",{parentName:"li"},"@olmokit/cli")," initially, and can be customised afterward."),(0,o.kt)("li",{parentName:"ul"},"All files marked ",(0,o.kt)("inlineCode",{parentName:"li"},"autogenerated")," are autogenerated by ",(0,o.kt)("inlineCode",{parentName:"li"},"@olmokit/cli")," on each run, they cannot be customised (TODO: maybe allow it).")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Everything greyed out is gitignored.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"\u251c\u2500\u2500 .vscode # autogenerated, customizable\n\u251c\u2500\u2500 .husky # autogenerated, customizable\n#\u2500\u2500 bootstrap/ # standard laravel folder (.gitignored)\n#   \u251c\u2500\u2500 cache.php # standard laravel\n#   \u2514\u2500\u2500 app.php # standard laravel\n\u251c\u2500\u2500 config/ # standard laravel folder\n#   \u251c\u2500\u2500 env.php # autogenerated (.gitignored)\n\u2502   \u2514\u2500\u2500 laravel-frontend.php # custom configuration merged to the default\n#\u2500\u2500 node_modules # .gitignored\n\u251c\u2500\u2500 public/ # standard laravel folder\n#   \u251c\u2500\u2500 assets/ # compiled static assets (.gitignored)\n#   \u251c\u2500\u2500 index.php # .gitignored\n\u2502   \u251c\u2500\u2500 .htaccess # **\n\u2502   \u251c\u2500\u2500 .htaccess.dev # **\n\u2502   \u251c\u2500\u2500 .htaccess.staging # **\n\u2502   \u251c\u2500\u2500 .htaccess.production # **\n#   \u2514\u2500\u2500 favicon.ico # autogenerated (.gitignored)\n#\u2500\u2500 resources/ # standard laravel folder (.gitignored)\n#   \u2514\u2500\u2500 components/ # compiled components, including core components and utils to use across pages. Only files from `src/components` will follow PascalCase <x-MyComponent /> syntax, the others will use kebab-case syntax <x-my-util />\n#   \u2502   \u251c\u2500\u2500 MyComponent.blade.php # component template\n#   \u2502   \u251c\u2500\u2500 MyComponent.php # component \"controller\" (optional)\n#   \u2502   \u251c\u2500\u2500 assets-body.php # automated views get copied here too\n#   \u2502   \u2514\u2500\u2500 seo-meta.php # core views get copied here too\n#   \u251c\u2500\u2500 fragments/ # compiled fragments\n#   \u2502   \u2514\u2500\u2500 MyFragment.php # custom fragment controller\n#   \u2502   \u2514\u2500\u2500 routes.php # custom fragment's routes\n#   \u251c\u2500\u2500 layouts/ # compiled layout\n#   \u2502   \u2514\u2500\u2500 main.blade.php # compiled layout templates\n#   \u251c\u2500\u2500 middlewares/ # compiled middlewares\n#   \u2502   \u251c\u2500\u2500 Middlewares.php # automated middlewares registration file\n#   \u2502   \u2514\u2500\u2500 MyMiddleware.php # compiled middleware classes\n#   \u251c\u2500\u2500 routes/ # compiled routes\n#   \u2502   \u251c\u2500\u2500 RouteHome.blade.php # route compiled template\n#   \u2502   \u2514\u2500\u2500 RouteHome.php # route compiled controller\n#   \u2502   \u2514\u2500\u2500 routes.php # optional custom routes file\n#   \u251c\u2500\u2500 services/ # compiled services\n#   \u2502   \u251c\u2500\u2500 MyService.php # compiled service class\n#   |   \u2514\u2500\u2500 MyServiceProvider.php # compiled service provider class\n#   \u2514\u2500\u2500 translations.csv # translated strings .csv files\n\u251c\u2500\u2500 src/ # source of all the frontend (it will not be deployed)\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u2502   \u251c\u2500\u2500 images/ # all static images\n\u2502   \u2502   |   \u2514\u2500\u2500 placeholder.png # required placeholder for broken images sources\n\u2502   \u2502   \u251c\u2500\u2500 media/ # all static video and audio files\n\u2502   \u2502   \u251c\u2500\u2500 svgicons/ # svg images that will be turned automatically in an icon system\n\u2502   \u2502   \u251c\u2500\u2500 fonts/ # custom fonts\n\u2502   \u2502   \u2514\u2500\u2500 favicon.png # required image to automatically generate all favicons\n\u2502   \u2502   \u2514\u2500\u2500 translations.csv # required translation strings file\n\u2502   \u251c\u2500\u2500 config/ # configuration files\n\u2502   \u2502   \u251c\u2500\u2500 placeholders.scss # scss config (always included in any other file)\n\u2502   \u2502   \u251c\u2500\u2500 mixins.scss # scss config (always included in any other file)\n\u2502   \u2502   \u251c\u2500\u2500 variables.scss # scss config (always included in any other file)\n\u2502   \u2502   \u2514\u2500\u2500 index.js # js config (globals, settings, ecc.)\n\u2502   \u251c\u2500\u2500 components/ # decoupled components to use across routes\n\u2502   \u2502   \u2514\u2500\u2500 Mycomponent/ # component folder uses component name\n\u2502   \u2502       \u251c\u2500\u2500 index.js # component script\n\u2502   \u2502       \u251c\u2500\u2500 index.scss # component style\n\u2502   \u2502       \u251c\u2500\u2500 index.php # component controller\n\u2502   \u2502       \u2514\u2500\u2500 index.blade.php # component template\n\u2502   \u251c\u2500\u2500 fragments/ # custom routes and async behaviours\n\u2502   \u2502   \u251c\u2500\u2500 routes.php # custom routes definitions\n\u2502   \u2502   \u2514\u2500\u2500 MyController.php # custom route handlers\n\u2502   \u251c\u2500\u2500 layouts # usually just one for project, but more layouts can be created and used independently within the same project\n\u2502   \u2502   \u2514\u2500\u2500 main # usually the standard layout to use in all templates\n\u2502   \u2502       \u251c\u2500\u2500 index.js # common js/scss imports for this layout\n\u2502   \u2502       \u251c\u2500\u2500 index.scss # common scss for this layout\n\u2502   \u2502       \u2514\u2500\u2500 index.blade.php # base template for this layout\n\u2502   \u251c\u2500\u2500 middlewares # custom laravel middlewares (optional)\n\u2502   \u2502   \u251c\u2500\u2500 MyMiddleware.php # custom middleware\n\u2502   \u251c\u2500\u2500 routes # routes entrypoints\n\u2502   \u2502   \u251c\u2500\u2500 home\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.js # route specific and scoped scripts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.php # route specific controller\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.blade.php # route specific template\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.scss # route specific and scoped styles\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.json # route specific static json data (optional)\n\u2502   \u2502   \u2514\u2500\u2500 routes.php # file with custom routes (optional)\n\u2502   \u251c\u2500\u2500 services # custom laravel services (optional)\n\u2502   \u2502   \u251c\u2500\u2500 MyService.php # custom service\n\u2502   \u2502   \u251c\u2500\u2500 MyServiceProvider.php # custom service provider\n\u2502   \u251c\u2500\u2500 utils # folder to drop-in js/scss files, event templates can be here, these are copied automatically to the /resources/components folder allowing usage with e.g. <x-utils-some-utility />\n\u2502   \u2502   \u251c\u2500\u2500 some-utility.blade.php # will be copied to /resources/components\n\u2502   \u2502   \u251c\u2500\u2500 animations.scss # utils like styles\n\u2502   \u2502   \u2514\u2500\u2500 animations.js # utils simple script\n\u2502   \u2514\u2500\u2500 vendor # custom vendor imports\n#       \u251c\u2500\u2500 routesBarba.ts # automatic imports for barba (.gitignored)\n\u2502       \u251c\u2500\u2500 package-name.js # customised vendor script\n\u2502       \u2514\u2500\u2500 package-name.scss # customised vendor styles\n#\u2500\u2500 storage/ # standard laravel folder .gitignored\n#   \u251c\u2500\u2500 app\n#   \u251c\u2500\u2500 debugbar\n#   \u251c\u2500\u2500 framework\n#   \u2514\u2500\u2500 logs\n#\u2500\u2500 vendor # .gitignored\n#\u2500\u2500 artisan # standard laravel php bin (.gitignored)\n#\u2500\u2500 tsconfig.json # autogenerated\n#\u2500\u2500 README.md # autogenerated\n#\u2500\u2500 .env # autogenerated\n\u251c\u2500\u2500 olmo.ts # public configuration of the project\n\u251c\u2500\u2500 .olmo.ts # custom local configuration of the project (.gitignored)\n\u251c\u2500\u2500 composer.json # composer dependencies\n\u251c\u2500\u2500 package.json # project's configuration and npm dependencies\n\u2502\u2500\u2500 .gitignore # **\n\u2514\u2500\u2500 .gitlab-ci.yml # (optional)\n")),(0,o.kt)("p",null,"Here in details:"),(0,o.kt)("h2",{id:"bootstrap"},"bootstrap"),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("a",{parentName:"p",href:"https://laravel.com/docs/8.x/structure#the-bootstrap-directory"},"Laravel documentation"),". This folder is gitignored here."),(0,o.kt)("h2",{id:"config"},"config"),(0,o.kt)("p",null,"The config directory contains all of your application's configuration files, see ",(0,o.kt)("a",{parentName:"p",href:"https://laravel.com/docs/8.x/structure#the-config-directory"},"Laravel documentation"),". Unlike standard laravel you usually do not have many files here, but actually just one ",(0,o.kt)("inlineCode",{parentName:"p"},"config/laravel-frontend.php")," as ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/laravel-frontend"},"Laravel Frontend")," will already includes all the typical config files you need. If something outside ",(0,o.kt)("inlineCode",{parentName:"p"},"laravel-frontend")," need to be overriden in your project, for instance to add some custom cached ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," variables, you can create the same config file (with the same name, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"config/env.php"),") and override or add just the keys you want, without redeclaring the ones already present. Your file will be merged on top of the default one provided by ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/laravel-frontend"},"Laravel Frontend"),". See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/olmokit/olmokit/-/tree/main/packages/laravel-frontend/config"},"all configuration files in the source code"),"."),(0,o.kt)("h2",{id:"public"},"public"),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("a",{parentName:"p",href:"https://laravel.com/docs/8.x/structure#the-public-directory"},"Laravel documentation"),". Typically you should only have here your environment sensible ",(0,o.kt)("inlineCode",{parentName:"p"},".htaccess")," files, these files are automatically generated if missing each time you run a workflow command from the ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/usage"},"Olmokit CLI"),". All the rest here is processed, compiled and gitignored."),(0,o.kt)("h2",{id:"resources"},"resources"),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("a",{parentName:"p",href:"https://laravel.com/docs/8.x/structure#the-resources-directory"},"Laravel documentation"),". It contains all processed blade templates and php files. This folder is ",(0,o.kt)("inlineCode",{parentName:"p"},"gitignored")," as all its typical files are put in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/")," and processed before getting here."),(0,o.kt)("h2",{id:"src"},"src"),(0,o.kt)("p",null,"All the actual code of your project resides here."),(0,o.kt)("h3",{id:"srcassets"},"src/assets"),(0,o.kt)("p",null,"This folders contains all static assets that gets manipulated, optimized and copied over the October's default ",(0,o.kt)("inlineCode",{parentName:"p"},"public/assets")," folder, they are divided as such:"),(0,o.kt)("h4",{id:"srcassetsfonts"},"src/assets/fonts"),(0,o.kt)("p",null,"All fonts files, they will get automatically optimized, content hashed. An ",(0,o.kt)("inlineCode",{parentName:"p"},".htaccess")," with long term expiration headers will be placed in this folder on build."),(0,o.kt)("h4",{id:"srcassetsimages"},"src/assets/images"),(0,o.kt)("p",null,"All static theme images, they will get automatically optimized and copied with the same file name in the ",(0,o.kt)("inlineCode",{parentName:"p"},"public/assets/images")," folder. A content hashed version is also create when the image is used through webpack processing. An ",(0,o.kt)("inlineCode",{parentName:"p"},".htaccess")," with long term expiration headers will be placed in this folder on build."),(0,o.kt)("h4",{id:"srcassetsimagesplaceholderpng"},"src/assets/images/placeholder.png"),(0,o.kt)("p",null,"Required image used as fallback for broken images."),(0,o.kt)("h4",{id:"srcassetsmedia"},"src/assets/media"),(0,o.kt)("p",null,"All static theme video, audio and other files, their filenames will ",(0,o.kt)("strong",{parentName:"p"},"not")," be hashed. No ",(0,o.kt)("inlineCode",{parentName:"p"},".htaccess")," will be placed here."),(0,o.kt)("h4",{id:"srcassetssvgicons"},"src/assets/svgicons"),(0,o.kt)("p",null,"All svg icons that will be optimized and inlined in an automated component ",(0,o.kt)("inlineCode",{parentName:"p"},"<x-svgicons/>")," to be usually included in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/layouts/main/index.blade.php"),". They will be later used in the templates by using the core component ",(0,o.kt)("inlineCode",{parentName:"p"},'<x-icon id="arrow_left"/>')),(0,o.kt)("h4",{id:"srcassetsfaviconpng"},"src/assets/favicon.png"),(0,o.kt)("p",null,"Required png image (",(0,o.kt)("strong",{parentName:"p"},"1024x1024")," is the optimal resolution) used to automatically generate all needed favicons. The script builds an automated ",(0,o.kt)("inlineCode",{parentName:"p"},"<x-favicons/>")," component to be usually included in ",(0,o.kt)("inlineCode",{parentName:"p"},"src/layouts/main/index.blade.php")),(0,o.kt)("h3",{id:"srccomponents"},"src/components"),(0,o.kt)("p",null,"This folder contain ",(0,o.kt)("strong",{parentName:"p"},"components")," that are quite specific pieces of UI usually reused within the same project and that can, but not necessarily need, to be reused accross different projects. They should be responsible of specific functionalities and should be configurable from outside enought to allow their reuse in the same project. Usual use cases for components are pieces of UI like the ",(0,o.kt)("inlineCode",{parentName:"p"},"Header"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"Footer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Card"),"s, ",(0,o.kt)("inlineCode",{parentName:"p"},"Slider"),"s, ecc."),(0,o.kt)("p",null,"Each component resides in its folder with a ",(0,o.kt)("inlineCode",{parentName:"p"},"js/scss")," index file, a ",(0,o.kt)("inlineCode",{parentName:"p"},"blade")," template and an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"php")," class. For an in-depth documentation on how to component works in Blade refer to ",(0,o.kt)("a",{parentName:"p",href:"https://laravel.com/docs/8.x/blade#components"},"Laravel documentation"),"."),(0,o.kt)("p",null,"Components folders by convention are named ",(0,o.kt)("strong",{parentName:"p"},"PascalCase"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"ProductDetail")," following a React like syntax and differentiating from the ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/code-conventions#core"},"core components")," that follow a ",(0,o.kt)("strong",{parentName:"p"},"kebab-case")," syntax. This means that you ",(0,o.kt)("em",{parentName:"p"},"use components")," defined in this folder with ",(0,o.kt)("inlineCode",{parentName:"p"},"<x-ProductDetail />")," in your templates."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# create a component by running\nolmo component MyComponent\n# or multiple components with comma separated values\nolmo component MyComponent,AnotherComponent\n")),(0,o.kt)("h3",{id:"srcconfig"},"src/config"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"scss")," files here (",(0,o.kt)("inlineCode",{parentName:"p"},"functions.scss"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mixins.scss"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"variables.scss"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"placeholders.scss"),") are always made automatically available to the whole project files. This is also the place where to put JavaScript global ",(0,o.kt)("strong",{parentName:"p"},"configurations")," such as breakpoints, various forms of data, URLs etc."),(0,o.kt)("h3",{id:"srcfragments"},"src/fragments"),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes.php")," you can define your custom routes and async endpoints (with the same degree of freedom you would have in the standard ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/web.php")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/api.php")," of a ",(0,o.kt)("a",{parentName:"p",href:"https://laravel.com/docs/8.x/structure#the-routes-directory"},"typical Laravel installation"),"). You are free to implement custom controllers and services here, all ",(0,o.kt)("inlineCode",{parentName:"p"},"php")," files will be copied as they are, without renaming, to the ",(0,o.kt)("inlineCode",{parentName:"p"},"resources/fragments")," folder. so the php namespace for each file here will be ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/olmokit/olmokit/-/blob/main/packages/template-laravel/template/src/fragments/routes.php#L4"},(0,o.kt)("inlineCode",{parentName:"a"},"resources\\fragments")),"."),(0,o.kt)("h3",{id:"srcmiddlwares"},"src/middlwares"),(0,o.kt)("p",null,"Optional folder containing your project's custom middlewares, see ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/laravel-frontend/App#creating-custom-middlewares"},"specific docs on how to create custom middlewares"),"."),(0,o.kt)("h3",{id:"srcroutes"},"src/routes"),(0,o.kt)("p",null,"This folder contains ",(0,o.kt)("strong",{parentName:"p"},"Routes")," code, each folder represent a route endpoint and is usually but not necessarily tight to a CMS API endpoint. If a route defined in the ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/laravel-frontend/Cms#structure"},(0,o.kt)("inlineCode",{parentName:"a"},"/api/structure")," endpoint")," is missing in your codebase the ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/usage"},"start CLI command")," will auto-generate it, likewise it will warn when a route is defined in the codebase and missing in the CMS (although this can be completely fine it is better to know it). Each route folder here must contain an ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file that is used as ",(0,o.kt)("a",{parentName:"p",href:"https://webpack.js.org/concepts/entry-points/"},"an entrypoint for webpack")," to generate the static assets. This way route's code is always scoped and outputted only to its specific template. So by default JS and SCSS code written here cannot interfere with other routes."),(0,o.kt)("p",null,"Route folders are by convention all ",(0,o.kt)("strong",{parentName:"p"},"lowercase alphanumeric strings"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"singleproduct"),", to allow having route error folders named as numbers only (",(0,o.kt)("inlineCode",{parentName:"p"},"src/routes/404/index.php"),") their names are translated to ",(0,o.kt)("inlineCode",{parentName:"p"},"Route404.php")," once processed and put in the ",(0,o.kt)("inlineCode",{parentName:"p"},"resources")," folder, otherwise their controllers would result in invalid php class names."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# create a route by running\nolmo route myroute\n# or multiple routes with comma separated values\nolmo route myroute,anotherroute\n")),(0,o.kt)("h3",{id:"srcservices"},"src/services"),(0,o.kt)("p",null,"Optional folder containing your project's custom services, composers and providers, see ",(0,o.kt)("a",{parentName:"p",href:"/olmokit/laravel-frontend/App#services-"},"specific docs on services"),"."),(0,o.kt)("h3",{id:"srcutils"},"src/utils"),(0,o.kt)("p",null,"Here we can put ",(0,o.kt)("inlineCode",{parentName:"p"},"js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"scss")," ",(0,o.kt)("strong",{parentName:"p"},"utilities")," to use and import where needed from either ",(0,o.kt)("inlineCode",{parentName:"p"},"layouts"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"routes"),". This is also a good place for tiny utils templates ",(0,o.kt)("inlineCode",{parentName:"p"},".blade.php")," if needed, they will be watched and copied over to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/resources")," directory and therefore become available in templates to use with ",(0,o.kt)("inlineCode",{parentName:"p"},"<x-utils-my-util />")),(0,o.kt)("h3",{id:"srcvendor"},"src/vendor"),(0,o.kt)("p",null,"This is the folder where to put ",(0,o.kt)("strong",{parentName:"p"},"custom vendor")," files that cannot for various reasons be added and managed by ",(0,o.kt)("inlineCode",{parentName:"p"},"npm"),". A common use case is the presence of the premium ",(0,o.kt)("inlineCode",{parentName:"p"},"gsap")," package that cannot be installed from the public ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," repository. In order to force using the local version of ",(0,o.kt)("inlineCode",{parentName:"p"},"gsap")," add the following below your dependencies in the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"overrides": {\n  "gsap": "file:src/vendor/gsap-bonus.tgz"\n},\n')))}u.isMDXComponent=!0}}]);