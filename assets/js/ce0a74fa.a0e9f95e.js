"use strict";(self.webpackChunk_olmokit_docs=self.webpackChunk_olmokit_docs||[]).push([[8242],{7522:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(9901);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(3027),r=(n(9901),n(7522));const o={title:"barba"},i=void 0,l={unversionedId:"core/barba",id:"core/barba",title:"barba",description:"Due to its natura the integration of barbajs is done at multiple levels and is taken care also outside of this core package.",source:"@site/docs/core/barba.md",sourceDirName:"core",slug:"/core/barba",permalink:"/olmokit/core/barba",draft:!1,editUrl:"https://github.com/olmokit/olmokit/edit/main/docs/docs/core/barba.md",tags:[],version:"current",frontMatter:{title:"barba"},sidebar:"docs",previous:{title:"ajax",permalink:"/olmokit/core/ajax"},next:{title:"forms",permalink:"/olmokit/core/forms"}},s={},c=[{value:"Routes definition",id:"routes-definition",level:2},{value:"Components and layout",id:"components-and-layout",level:2},{value:"JavaScript lifecycles",id:"javascript-lifecycles",level:2},{value:"SEO",id:"seo",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Due to its natura the integration of ",(0,r.kt)("a",{parentName:"p",href:"https://barba.js.org/"},"barbajs")," is done at multiple levels and is taken care also outside of this core package."),(0,r.kt)("h2",{id:"routes-definition"},"Routes definition"),(0,r.kt)("p",null,"The file ",(0,r.kt)("inlineCode",{parentName:"p"},"src/vendor/routesBarba.ts")," is autogenerated by ",(0,r.kt)("inlineCode",{parentName:"p"},"@olmokit/cli"),", the idea is to keep having a per route isolation both in terms of JS entrypoints and CSS inlined per route. The latter is simply managed through inlining the new route's CSS inside the asynchronously fetched new route's html and disabling the old one ",(0,r.kt)("inlineCode",{parentName:"p"},"beforEnter"),". Each of these CSS are ",(0,r.kt)("inlineCode",{parentName:"p"},"<style>")," tag with a conventional id like",(0,r.kt)("inlineCode",{parentName:"p"},"__route-style-${id}")," and generically matched by the data attr ",(0,r.kt)("inlineCode",{parentName:"p"},"data-route-style"),". Per route JS handling is a bit more complicated, and the reason for the existence of this autogenerated file. Webpack async imports cannot have a variable in their path, hence we precompile ",(0,r.kt)("inlineCode",{parentName:"p"},"routesBarba.js")," with the routes information returned by the CMS during the build step in the CI (and on ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run start")," too). We build a barba view for each of our routes, attaching the barba hooks to standard lifecycle methods of the routes' entrypoints components: ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeEnter")," => ",(0,r.kt)("inlineCode",{parentName:"p"},"route()")," (basic component instantiation), ",(0,r.kt)("inlineCode",{parentName:"p"},"afterEnter")," => ",(0,r.kt)("inlineCode",{parentName:"p"},"route.mount()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"afterLeave")," => ",(0,r.kt)("inlineCode",{parentName:"p"},"route.destroy()"),". For some of this topics see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/barbajs/barba/issues/410where"},"this github issue")," where it suggested to just create a single js/css file, which might also work if we automatically scope the css on the entire page. But at the moment, with the current approach we are free to keep having global styles applied per route without having to worry of style collisions, for instance we can have each route specifying a body background without having to scope the css selector and that's something useful and comfortable to use. Also JS might become very heavy if we just pack everything in a single file..."),(0,r.kt)("h2",{id:"components-and-layout"},"Components and layout"),(0,r.kt)("p",null,"The only file that would need changes is the ",(0,r.kt)("inlineCode",{parentName:"p"},"layouts/{main}/index.blade.php")," which should be something like what ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/olmokit/olmokit/-/tree/main/packages/template-laravel/src/layouts/main/index.blade.php"},"you find here in the default template")),(0,r.kt)("h2",{id:"javascript-lifecycles"},"JavaScript lifecycles"),(0,r.kt)("p",null,"Routes should use the HOC ",(0,r.kt)("inlineCode",{parentName:"p"},"@olmokit/core/barba/route")," ...TODO: docs"),(0,r.kt)("h2",{id:"seo"},"SEO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://support.google.com/tagmanager/answer/7679322"},"About Google Tag Manager"))))}d.isMDXComponent=!0}}]);