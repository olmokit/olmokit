"use strict";(self.webpackChunk_olmokit_docs=self.webpackChunk_olmokit_docs||[]).push([[6013],{7522:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(9901);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(a),d=o,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4377:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(3027),o=(a(9901),a(7522));const r={title:"ajax"},i=void 0,l={unversionedId:"core/ajax",id:"core/ajax",title:"ajax",description:"There are few types of ajax behaviours that are streamlined and eased by @olmokit/core/ajax.",source:"@site/docs/core/ajax.md",sourceDirName:"core",slug:"/core/ajax",permalink:"/core/ajax",draft:!1,editUrl:"https://github.com/olmokit/olmokit/edit/main/docs/docs/core/ajax.md",tags:[],version:"current",frontMatter:{title:"ajax"},sidebar:"docs",previous:{title:"Overview",permalink:"/core"},next:{title:"barba",permalink:"/core/barba"}},c={},s=[{value:"Load external resources",id:"load-external-resources",level:2},{value:"Default ajax client",id:"default-ajax-client",level:2},{value:"Comnunication with the frontend",id:"comnunication-with-the-frontend",level:2},{value:"Comnunication with the backend",id:"comnunication-with-the-backend",level:2}],p={toc:s},m="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are few types of ajax behaviours that are streamlined and eased by ",(0,o.kt)("inlineCode",{parentName:"p"},"@olmokit/core/ajax"),"."),(0,o.kt)("h2",{id:"load-external-resources"},"Load external resources"),(0,o.kt)("p",null,"Use this when you want to load ",(0,o.kt)("strong",{parentName:"p"},"thirdy party")," ",(0,o.kt)("em",{parentName:"p"},"CSS")," or ",(0,o.kt)("em",{parentName:"p"},"JS")," libraries from publicly available CDN. This is just an alias for the library ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/muicss/loadjs"},(0,o.kt)("inlineCode",{parentName:"a"},"loadjs"))," you can follow its documentation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import loadResource from "@olmokit/core/ajax/loadResource";\nimport loadResource from "@olmokit/core/ajax/loadResource";\n\nloadResource(["https://addevent.com/libs/atc/1.6.1/atc.min.js"]);\n')),(0,o.kt)("h2",{id:"default-ajax-client"},"Default ajax client"),(0,o.kt)("p",null,"A simple wrapper around ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cferdinandi/atomic"},(0,o.kt)("strong",{parentName:"a"},"atomic")," a tiny promise based Ajax/HTTP library"),". By defalt it uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," method. It adds caching by passing a ",(0,o.kt)("inlineCode",{parentName:"p"},"cacheKey")," to the options second argument, an ",(0,o.kt)("inlineCode",{parentName:"p"},"ajaxClearCache")," is also exposed in order to control the cache clearing."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Caching is opt-in, use it only if you have performance problems and use it with ",(0,o.kt)("em",{parentName:"p"},"awareness")," or it might lead to data inconsistencies.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import ajax, { ajaxClearCache } from "@olmokit/core/ajax";\nimport ajax, { ajaxClearCache } from "@olmokit/core/ajax";\n\nasync function MyComponent() {\n  const response = await ajax("/some/endpoint", {\n    // cacheKey: true // if true a cache key based on the URL is created\n    cacheKey: "myKey",\n  });\n  console.log(response.data);\n\n  // at some point...\n  ajaxClearCache("myKey");\n}\n\nMyComponent();\n')),(0,o.kt)("h2",{id:"comnunication-with-the-frontend"},"Comnunication with the frontend"),(0,o.kt)("p",null,"Compared to the default ajax client these helpers simply automatically add the ",(0,o.kt)("inlineCode",{parentName:"p"},"X-CSRF")," token needed by Laravel to secure requests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { get } from "@olmokit/core/ajax/laravel";\nimport { get } from "@olmokit/core/ajax/laravel";\n\nasync function MyComponent() {\n  const response = await get("/some/endpoint");\n  console.log(response.data);\n}\n\nMyComponent();\n')),(0,o.kt)("h2",{id:"comnunication-with-the-backend"},"Comnunication with the backend"),(0,o.kt)("p",null,"Most of the time it is better to relay the ajax calls to the CMS through your Laravel frontend by exposing an internal ",(0,o.kt)("a",{parentName:"p",href:"/guides/async-behaviours"},"fragment route endpoint")," but if you really need to communicate directly with the backend API you might use these helpers. It allows to automatically interpolate the ",(0,o.kt)("em",{parentName:"p"},"current locale")," and it even adds the right ",(0,o.kt)("em",{parentName:"p"},"authentication headers")," if the ",(0,o.kt)("inlineCode",{parentName:"p"},"$user")," object is exposed to Javascript in your template with ",(0,o.kt)("inlineCode",{parentName:"p"},'<x-data key="user" :value="$user">')," although that is not encouraged due to security reasons."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { get, post } from "@olmokit/core/ajax/cms";\n\nasync function MyComponent() {\n  const response = await get("{locale}/some/endpoint");\n  console.log(response.data);\n\n  const response = await post("another/endpoint", {\n    data: {\n      key1: response.data.someValue,\n      key2: "some other data",\n    },\n  });\n}\n\nMyComponent();\n')))}u.isMDXComponent=!0}}]);